require 'builder'

local b = genie.Builder.new()

b:component('dispatch')
	b:clock_sink('clk')
	b:reset_sink('reset')
	b:rs_src('out', 'clk')
		b:signal('valid', 'o_valid')
		b:signal('ready', 'i_ready')
		b:signal('data', 'o_data', 'WIDTH')
		b:signal('address', 'o_lp', 1)

b:component('inverter')
	b:clock_sink('clk')
	b:reset_sink('reset')
	b:rs_sink('in', 'clk')
		b:signal('valid', 'i_valid')
		b:signal('ready', 'o_ready')
		b:signal('data', 'i_data', 'WIDTH')
	b:rs_src('out', 'clk')
		b:signal('valid', 'o_valid')
		b:signal('ready', 'i_ready')
		b:signal('data', 'o_data', 'WIDTH')
	
b:component('xorer')
	b:clock_sink('clk')
	b:reset_sink('reset')
	b:rs_sink('in', 'clk')
		b:signal('valid', 'i_valid')
		b:signal('ready', 'o_ready')
		b:signal('data', 'i_data', 'WIDTH')	
		b:signal('address', 'i_lp', 1)
	b:rs_src('out', 'clk')
		b:signal('valid', 'o_valid')
		b:signal('ready', 'i_ready')
		b:signal('data', 'o_data', 'WIDTH')

b:component('reverser')
	b:clock_sink('clk')
	b:reset_sink('reset')
	b:rs_sink('in', 'clk')
		b:signal('valid', 'i_valid')
		b:signal('ready', 'o_ready')
		b:signal('data', 'i_data', 'WIDTH')
	b:rs_src('out', 'clk')
		b:signal('valid', 'o_valid')
		b:signal('ready', 'i_ready')
		b:signal('data', 'o_data', 'WIDTH')

b:system('sm_test')
    b:clock_sink('clka')
	b:clock_sink('clkb')
    b:reset_sink('reset')
	b:instance('dispatch', 'the_dispatch')
		b:int_param('WIDTH', '16')
	b:instance('inverter', 'the_inverter')
		b:int_param('WIDTH', '16')
	b:instance('reverser', 'the_reverser')
		b:int_param('WIDTH', '16')
	b:instance('xorer', 'xorro')
		b:int_param('WIDTH', '16')
		
	for dest in Set.mkvalues{'the_dispatch', 'the_inverter', 'the_reverser', 'xorro'} do
		b:reset_link('reset', dest .. '.' .. 'reset')
	end
	
	b:clock_link('clka', 'the_dispatch.clk')
	b:clock_link('clka', 'the_inverter.clk')
	b:clock_link('clkb', 'the_reverser.clk')
	b:clock_link('clkb', 'xorro.clk')
	
	b:rs_link('the_dispatch.out', 'the_inverter.in', 0)
	b:rs_link('the_dispatch.out', 'the_reverser.in', 1)
	b:rs_link('the_inverter.out', 'xorro.in', nil, 0)
	b:rs_link('the_reverser.out', 'xorro.in', nil, 1)
	b:export ('xorro.out', 'out')
